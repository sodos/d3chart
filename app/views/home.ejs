<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Analytics</title>
        <!-- CSS -->
        <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Roboto:400,100,300,500">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css">        
        <link rel="stylesheet" href="/css/style.css">
        <style>
            body {
              font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;        
              position: relative;
              font-size: small;
            }

            text{
                cursor: pointer;
            }
            text.zone, text.state{
                background: black;
                color: white;
            }
            svg {
                width: 100%;
                height: 100%;
            }

            path.slice{
                stroke-width:2px;
            }

            polyline{
                opacity: .3;
                stroke: black;
                stroke-width: 2px;
                fill: none;
            }
        </style>
    </head>
    <body>        
        <div class="container">
            <div class="col-md-12" style="text-align:center">               
                <div class="pie" style="height:450px;"></div>                
            </div>
            <button class="show_zone btn btn-primary">Show Zone</button>
            <button class="show_state btn btn-primary">Show State</button>
            <button class="show_city btn btn-primary">Show City</button>
        </div>
    </body>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>         
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script src="/js/script.js"></script>
    <script>
        var svg = d3.select("div.pie")
            .append("svg")
            .append("g")

        svg.append("g")
            .attr("class", "slices");
        svg.append("g")
            .attr("class", "labels");
        svg.append("g")
            .attr("class", "lines");

        var width = 960,
            height = 450,
            radius = Math.min(width, height) / 2;

        var pie = d3.layout.pie()
            .sort(null)
            .value(function(d) {
                return d.value;
            });

        var arc = d3.svg.arc()
            .outerRadius(radius * 0.8)
            .innerRadius(radius * 0.4);

        var outerArc = d3.svg.arc()
            .innerRadius(radius * 0.9)
            .outerRadius(radius * 0.9);

        svg.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var key = function(d){ return d.data.label; };

        var color = d3.scale.ordinal()
            .domain(['North Zone','East Zone','West Zone','South Zone','Central Zone','North East Zone'])
            .range(["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f"]);

        // function randomData (){
        //     var labels = color.domain();
        //     return labels.map(function(label){
        //         return { label: label, value: Math.random() }
        //     });
        // }
        var data_zone = [];
        <% for(var i=0; i<sales_zone.length; i++) { %>data_zone.push({class:'zone',zone:'<%=sales_zone[i].zone%>',key:'<%=sales_zone[i].zone%>',label:'<%=sales_zone[i].zone%> (<%=sales_zone[i].sale%>)',value:<%=sales_zone[i].sale%>});
        <%}%>

        var data_state = [];
        <% for(var i=0; i<sales_state.length; i++) { %>data_state.push({class:'state',filter:'<%=sales_state[i].zone%>',zone:'<%=sales_state[i].zone%>',key:'<%=sales_state[i].state%>',label:'<%=sales_state[i].state%> (<%=sales_state[i].sale%>)',value:<%=sales_state[i].sale%>});
        <%}%>

        var data_city = [];
        <% for(var i=0; i<sales_city.length; i++) { %>data_city.push({class:'city',filter:'<%=sales_city[i].state%>',zone:'<%=sales_city[i].zone%>',key:'<%=sales_city[i].city%>',label:'<%=sales_city[i].city%> (<%=sales_city[i].sale%>)',value:<%=sales_city[i].sale%>});
        <%}%>

        change(data_zone);

        d3.select(".show_zone")
            .on("click", function(){
                change(data_zone);
            });
        d3.select(".show_state")
            .on("click", function(){
                change(data_state);
            });
        d3.select(".show_city")
            .on("click", function(){
                change(data_city);
            });

        
        $(document).on('click', 'text.zone', function(){
                console.log($(this).data('id'));
                change(data_state, $(this).data('id'));
            });

        $(document).on('click', 'text.state', function(){
                console.log($(this).data('id'));
                change(data_city, $(this).data('id'));
            });


        function change(data, filter='') {
            
            if(filter != ''){
                var tmp_data = data.filter(function (el) {return el.filter === filter });
                data = tmp_data;    
            }
            
            /* ------- PIE SLICES -------*/
            var slice = svg.select(".slices").selectAll("path.slice")
                .data(pie(data), key);

            slice.enter()                
                .insert("path")                
                .attr("class", "slice")
                .style("stroke", "white")
                .style("stroke-width", "1px")
                .style("fill", function(d) { return color(d.data.zone); })

            slice       
                .transition().duration(1000)
                .attrTween("d", function(d) {
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        return arc(interpolate(t));
                    };
                })

            slice.exit()
                .remove();

            /* ------- TEXT LABELS -------*/

            var text = svg.select(".labels").selectAll("text")
                .data(pie(data), key);

            text.enter()
                .append("text")                
                .attr("dy", ".35em")
                .attr("data-id", function(d) {
                    return d.data.key;
                })
                .attr("class", function(d) {
                    return d.data.class;
                })
                .text(function(d) {
                    return d.data.label;
                });
            
            function midAngle(d){
                return d.startAngle + (d.endAngle - d.startAngle)/2;
            }

            text.transition().duration(1000)
                .attrTween("transform", function(d) {
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        var d2 = interpolate(t);
                        var pos = outerArc.centroid(d2);
                        pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
                        return "translate("+ pos +")";
                    };
                })
                .styleTween("text-anchor", function(d){
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        var d2 = interpolate(t);
                        return midAngle(d2) < Math.PI ? "start":"end";
                    };
                });

            text.exit()
                .remove();

            /* ------- SLICE TO TEXT POLYLINES -------*/

            var polyline = svg.select(".lines").selectAll("polyline")
                .data(pie(data), key);
            
            polyline.enter()
                .append("polyline");

            polyline.transition().duration(1000)
                .attrTween("points", function(d){
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        var d2 = interpolate(t);
                        var pos = outerArc.centroid(d2);
                        pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
                        return [arc.centroid(d2), outerArc.centroid(d2), pos];
                    };          
                });
            
            polyline.exit()
                .remove();
        };


    </script>
</html>