<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Analytics</title>
        <!-- CSS -->
        <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Roboto:400,100,300,500">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css">        
        <link rel="stylesheet" href="/css/style.css">
        <style>
            body {
              font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;        
              position: relative;
              font-size: small;
            }

            text, path{
                cursor: pointer;
            }
            text.zone, text.state{
                background: black;
                color: white;
            }
            svg {
                width: 100%;
                height: 100%;
            }

            path.slice{
                stroke-width:2px;
            }

            polyline{
                opacity: .3;
                stroke: black;
                stroke-width: 2px;
                fill: none;
            }
            div.chart{
                border: 1px solid #d2d2d2;
            }
            label.notice{
                background: black;
                color: white;
                padding: 0% 1%;
                margin-right: 15px;
            }
        </style>
    </head>
    <body>        
        <div class="container" style="margin-top: 2%;">
            <div class="col-md-8" style="text-align:center">               
                <div id="pie-chart" class="chart" style="height:450px;"></div>                
                <button class="show_zone btn btn-primary">Show All Zone</button>
                <button class="show_state btn btn-primary">Show All State</button>
                <button class="show_city btn btn-primary">Show All City</button>
            </div>
            <div class="col-md-4">
                <div id="bar-chart1" class="chart" style="height:220px;"></div>
                <div id="bar-chart2"  class="chart" style="height:220px;margin-top: 10px;"></div>
            </div>
            <label class="pull-right notice"> ...</label>
        </div>
    </body>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>         
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script src="/js/script.js"></script>
    <script>
        var svg1 = d3.select("div#pie-chart").append("svg")            
            .append("g")

        svg1.append("g")
            .attr("class", "slices");
        svg1.append("g")
            .attr("class", "labels");
        svg1.append("g")
            .attr("class", "lines");


        var margin = {top: 20, right: 5, bottom: 70, left: 60},
            width2 = 350 - margin.left - margin.right,
            height2 = 220 - margin.top - margin.bottom;
            
        var svg2 = d3.select("div#bar-chart1").append("svg")
            .attr("width", width2 + margin.left + margin.right)
            .attr("height", height2 + margin.top + margin.bottom)
            .append("g")
            .attr("transform", 
                  "translate(" + margin.left + "," + margin.top + ")");

        var svg3 = d3.select("div#bar-chart2").append("svg")
            .attr("width", width2 + margin.left + margin.right)
            .attr("height", height2 + margin.top + margin.bottom)
            .append("g")
            .attr("transform", 
                  "translate(" + margin.left + "," + margin.top + ")");


        var width = 700,
            height = 450,
            radius = Math.min(width, height) / 2;

        var pie = d3.layout.pie()
            .sort(null)
            .value(function(d) {
                return d.value;
            });

        var arc = d3.svg.arc()
            .outerRadius(radius * 0.8)
            .innerRadius(radius * 0.4);

        var outerArc = d3.svg.arc()
            .innerRadius(radius * 0.9)
            .outerRadius(radius * 0.9);

        svg1.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var key = function(d){ return d.data.label; };

        var color = d3.scale.ordinal()
            .domain(['North Zone','East Zone','West Zone','South Zone','Central Zone','North East Zone'])
            .range(["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f"]);

        // function randomData (){
        //     var labels = color.domain();
        //     return labels.map(function(label){
        //         return { label: label, value: Math.random() }
        //     });
        // }
        var data_zone = [];
        <% for(var i=0; i<sales_zone.length; i++) { %>data_zone.push({class:'zone',zone:'<%=sales_zone[i].zone%>',key:'<%=sales_zone[i].zone%>',label:'<%=sales_zone[i].zone%> (<%=sales_zone[i].sale%>)',value:<%=sales_zone[i].sale%>});
        <%}%>

        var data_state = [];
        <% for(var i=0; i<sales_state.length; i++) { %>data_state.push({class:'state',filter:'<%=sales_state[i].zone%>',zone:'<%=sales_state[i].zone%>',key:'<%=sales_state[i].state%>',label:'<%=sales_state[i].state%> (<%=sales_state[i].sale%>)',value:<%=sales_state[i].sale%>});
        <%}%>

        var data_city = [];
        <% for(var i=0; i<sales_city.length; i++) { %>data_city.push({class:'city',filter:'<%=sales_city[i].state%>',zone:'<%=sales_city[i].zone%>',key:'<%=sales_city[i].city%>',label:'<%=sales_city[i].city%> (<%=sales_city[i].sale%>)',value:<%=sales_city[i].sale%>});
        <%}%>

        var data_date = [];
        <% for(var i=0; i<sales_date.length; i++) { %>data_date.push({date_s:'<%=sales_date[i].date%>',value:<%=sales_date[i].sale%>, amount:<%=sales_date[i].net_amount_sum%>});
        <%}%>

        var data_date_s = [];
        <% for(var i=0; i<sales_date_s.length; i++) { %>data_date_s.push({date_s:'<%=sales_date_s[i].date%>',value:<%=sales_date_s[i].sale%>, filter:'<%=sales_date_s[i].state%>', amount:<%=sales_date_s[i].net_amount_sum%>});
        <%}%>
        
        var data_date_z = [];
        <% for(var i=0; i<sales_date_z.length; i++) { %>data_date_z.push({date_s:'<%=sales_date_z[i].date%>',value:<%=sales_date_z[i].sale%>, filter:'<%=sales_date_z[i].zone%>', amount:<%=sales_date_z[i].net_amount_sum%>});
        <%}%>
        

        change(data_zone);
        bar_chart1(data_date);
        bar_chart2(data_date);
        d3.select(".show_zone")
            .on("click", function(){
                change(data_zone);
                bar_chart_change1(data_date);
                bar_chart_change2(data_date);
            });
        d3.select(".show_state")
            .on("click", function(){
                change(data_state);
                bar_chart_change1(data_date);
                bar_chart_change2(data_date);
            });
        d3.select(".show_city")
            .on("click", function(){
                change(data_city);
                bar_chart_change1(data_date);
                bar_chart_change2(data_date);
            });

        
        $(document).on('click', '.zone', function(){
            console.log($(this).data('id'));
            change(data_state, $(this).data('id'));
            bar_chart_change1(data_date_z, $(this).data('id'));
            bar_chart_change2(data_date_z, $(this).data('id'));
        });

        $(document).on('click', '.state', function(){
            console.log($(this).data('id'));
            change(data_city, $(this).data('id'));
            bar_chart_change1(data_date_s, $(this).data('id'));
            bar_chart_change2(data_date_s, $(this).data('id'));
        });        

        function change(data, filter='') {
            
            if(filter != ''){
                var tmp_data = data.filter(function (el) {return el.filter === filter });
                data = tmp_data;    
            }
            
            /* ------- PIE SLICES -------*/
            var slice = svg1.select(".slices").selectAll("path.slice")
                .data(pie(data), key);

            slice.enter()                
                .insert("path")                
                .attr("class", "slice")
                .attr("data-id", function(d) {
                    return d.data.key;
                })
                .attr("class", function(d) {
                    return d.data.class;
                })
                .style("stroke", "white")
                .style("stroke-width", "1px")
                .style("fill", function(d) { return color(d.data.zone); })

            slice       
                .transition().duration(1000)
                .attrTween("d", function(d) {
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        return arc(interpolate(t));
                    };
                })

            slice.exit()
                .remove();

            /* ------- TEXT LABELS -------*/

            var text = svg1.select(".labels").selectAll("text")
                .data(pie(data), key);

            text.enter()
                .append("text")                
                .attr("dy", ".35em")
                .attr("data-id", function(d) {
                    return d.data.key;
                })
                .attr("class", function(d) {
                    return d.data.class;
                })
                .text(function(d) {
                    return d.data.label;
                });
            
            function midAngle(d){
                return d.startAngle + (d.endAngle - d.startAngle)/2;
            }

            text.transition().duration(1000)
                .attrTween("transform", function(d) {
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        var d2 = interpolate(t);
                        var pos = outerArc.centroid(d2);
                        pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
                        return "translate("+ pos +")";
                    };
                })
                .styleTween("text-anchor", function(d){
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        var d2 = interpolate(t);
                        return midAngle(d2) < Math.PI ? "start":"end";
                    };
                });

            text.exit()
                .remove();

            /* ------- SLICE TO TEXT POLYLINES -------*/

            var polyline = svg1.select(".lines").selectAll("polyline")
                .data(pie(data), key);
            
            polyline.enter()
                .append("polyline");

            polyline.transition().duration(1000)
                .attrTween("points", function(d){
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                        var d2 = interpolate(t);
                        var pos = outerArc.centroid(d2);
                        pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
                        return [arc.centroid(d2), outerArc.centroid(d2), pos];
                    };          
                });
            
            polyline.exit()
                .remove();
        }

        // Parse the date / time
        var parseDate = d3.time.format("%b-%Y").parse;                        
        var nFormatter = function(d) {
             if (d >= 1000000000) {
                return (d / 1000000000).toFixed(1).replace(/\.0$/, '') + 'G';
             }
             if (d >= 1000000) {
                return (d / 1000000).toFixed(1).replace(/\.0$/, '') + 'M';
             }
             if (d >= 1000) {
                return (d / 1000).toFixed(1).replace(/\.0$/, '') + 'K';
             }
             return d;
        };

        function bar_chart1(data) {
            
            var x = d3.scale.ordinal().rangeRoundBands([0, width2], .05);
            var y = d3.scale.linear().range([height2, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom")
                .tickFormat(d3.time.format("%b-%Y"));

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left")
                .ticks(10);

            console.log(data);
            data.forEach(function(d) {                                
                tmp = d.date_s.split(' ');
                tmp = tmp[0].split('-');                
                d.date = new Date(tmp[0],tmp[1]-1,tmp[2]);
                console.log(d.date);
                d.value = +d.value;
            });            

            x.domain(data.map(function(d) { return d.date; }));
            y.domain([0, d3.max(data, function(d) { return d.value; })]);

            svg2.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + height2 + ")")
                  .call(xAxis)
                .selectAll("text")
                  .style("text-anchor", "end")
                  .attr("dx", "-.8em")
                  .attr("dy", "-.55em")
                  .attr("transform", "rotate(-90)" );

            svg2.append("g")
                  .attr("class", "y axis")
                  .call(yAxis)
                .append("text")
                  .attr("transform", "rotate(-90)")
                  .attr("y", 6)
                  .attr("dy", ".71em")
                  .style("text-anchor", "end")
                  .text("sale");

            svg2.selectAll("bar")
                  .data(data)
                .enter().append("rect")
                  .style("fill", "steelblue")
                  .attr("x", function(d) { return x(d.date); })
                  .attr("width", x.rangeBand())
                  .attr("y", function(d) { return y(d.value); })
                  .attr("height", function(d) { return height2 - y(d.value); });            
        }

        function bar_chart_change1(data, filter='') {
            //@ set label
            $('label.notice').html(filter);

            if(filter != ''){
                var tmp_data = data.filter(function (el) {return el.filter === filter });
                data = tmp_data;    
            }                       

            d3.select("div#bar-chart1").select("svg").remove();

            var svg2 = d3.select("div#bar-chart1").append("svg")
                .attr("width", width2 + margin.left + margin.right)
                .attr("height", height2 + margin.top + margin.bottom)
                .append("g")
                .attr("transform", 
                      "translate(" + margin.left + "," + margin.top + ")");

            var x = d3.scale.ordinal().rangeRoundBands([0, width2], .05);
            var y = d3.scale.linear().range([height2, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom")
                .tickFormat(d3.time.format("%b-%Y"));

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left")
                .ticks(10);

            console.log(data);
            data.forEach(function(d) {                                
                tmp = d.date_s.split(' ');
                tmp = tmp[0].split('-');                
                d.date = new Date(tmp[0],tmp[1]-1,tmp[2]);
                // console.log(d.date);
                d.value = +d.value;
            });
                            

            x.domain(data.map(function(d) { return d.date; }));
            y.domain([0, d3.max(data, function(d) { return d.value; })]);

            svg2.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + height2 + ")")
                  .call(xAxis)
                .selectAll("text")
                  .style("text-anchor", "end")
                  .attr("dx", "-.8em")
                  .attr("dy", "-.55em")
                  .attr("transform", "rotate(-90)" );

            svg2.append("g")
                  .attr("class", "y axis")
                  .call(yAxis)
                .append("text")
                  .attr("transform", "rotate(-90)")
                  .attr("y", 6)
                  .attr("dy", ".71em")
                  .style("text-anchor", "end")
                  .text("sale");

            svg2.selectAll("bar")
                  .data(data)
                .enter().append("rect")
                  .style("fill", "steelblue")
                  .attr("x", function(d) { return x(d.date); })
                  .attr("width", x.rangeBand())
                  .attr("y", function(d) { return y(d.value); })
                  .attr("height", function(d) { return height2 - y(d.value); });            
        }

        function bar_chart2(data) {
            
            var x = d3.scale.ordinal().rangeRoundBands([0, width2], .05);
            var y = d3.scale.linear().range([height2, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom")
                .tickFormat(d3.time.format("%b-%Y"));

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left")                
                .ticks(10)
                .tickFormat(nFormatter);

            console.log(data);
            data.forEach(function(d) {                                
                tmp = d.date_s.split(' ');
                tmp = tmp[0].split('-');                
                d.date = new Date(tmp[0],tmp[1]-1,tmp[2]);
                console.log(d.date);
                d.amount = +d.amount;
            });            

            x.domain(data.map(function(d) { return d.date; }));
            y.domain([0, d3.max(data, function(d) { return d.amount; })]);

            svg3.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + height2 + ")")
                  .call(xAxis)
                .selectAll("text")
                  .style("text-anchor", "end")
                  .attr("dx", "-.8em")
                  .attr("dy", "-.55em")
                  .attr("transform", "rotate(-90)" );

            svg3.append("g")
                  .attr("class", "y axis")
                  .call(yAxis)
                .append("text")
                  .attr("transform", "rotate(-90)")
                  .attr("y", 6)
                  .attr("dy", ".71em")
                  .style("text-anchor", "end")
                  .text("Rs.");

            svg3.selectAll("bar")
                  .data(data)
                .enter().append("rect")
                  .style("fill", "steelblue")
                  .attr("x", function(d) { return x(d.date); })
                  .attr("width", x.rangeBand())
                  .attr("y", function(d) { return y(d.amount); })
                  .attr("height", function(d) { return height2 - y(d.amount); });            
        }

        function bar_chart_change2(data, filter='') {
            //@ set label
            // $('label.notice').html(filter);

            if(filter != ''){
                var tmp_data = data.filter(function (el) {return el.filter === filter });
                data = tmp_data;    
            }                       

            d3.select("div#bar-chart2").select("svg").remove();

            var svg3 = d3.select("div#bar-chart2").append("svg")
                .attr("width", width2 + margin.left + margin.right)
                .attr("height", height2 + margin.top + margin.bottom)
                .append("g")
                .attr("transform", 
                      "translate(" + margin.left + "," + margin.top + ")");

            var x = d3.scale.ordinal().rangeRoundBands([0, width2], .05);
            var y = d3.scale.linear().range([height2, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom")
                .tickFormat(d3.time.format("%b-%Y"));

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left")                
                .ticks(10)
                .tickFormat(nFormatter);

            // console.log(data);
            data.forEach(function(d) {                                
                tmp = d.date_s.split(' ');
                tmp = tmp[0].split('-');                
                d.date = new Date(tmp[0],tmp[1]-1,tmp[2]);
                // console.log(d.date);
                d.amount = +d.amount;
            });
                            

            x.domain(data.map(function(d) { return d.date; }));
            y.domain([0, d3.max(data, function(d) { return d.amount })]);

            svg3.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + height2 + ")")
                  .call(xAxis)
                .selectAll("text")
                  .style("text-anchor", "end")
                  .attr("dx", "-.8em")
                  .attr("dy", "-.55em")
                  .attr("transform", "rotate(-90)" );

            svg3.append("g")
                  .attr("class", "y axis")
                  .call(yAxis)
                .append("text")
                  .attr("transform", "rotate(-90)")
                  .attr("y", 6)
                  .attr("dy", ".71em")
                  .style("text-anchor", "end")
                  .text("Rs.");

            svg3.selectAll("bar")
                  .data(data)
                .enter().append("rect")
                  .style("fill", "steelblue")
                  .attr("x", function(d) { return x(d.date); })
                  .attr("width", x.rangeBand())
                  .attr("y", function(d) { return y(d.amount); })
                  .attr("height", function(d) { return height2 - y(d.amount); });            
        }

        
    </script>
</html>